var submissions; 								// Array - all work submitted by a deadline.
var users; 										// Array - all submitters.  Order kept in a way that users[0]'s submission is submissions[0]
var reviews;									// 2DArray - all reviews.  Order kept in a way that users[0] will have reviews to do in reviews[0]
var totalReviewsToDo; 							// Int - set ammount of reviews to be done.

var maxClockOffset = submissions.length - 1;	// Int - max offset when selecting a reviewer.

// The structural example will include 4 submissions.  Letter is a user.  Number is a submission.
users = 		[a] [b] [c] [d]
submissions = 	[0] [1] [2] [3]
reviews = 		[[]] [[]] [[]] [[]]


totalReviewsToDo = 2; 							// From the deadline setting
if totalReviewsToDo >= users.length
	totalReviewsToDo = users.length-1
	email_teacher_not_enough_submissions_to_do_original_review_count();


maxClockOffset = 3;

// The algorithm
var offset = 1; 

for i = 0; i < totalReviewsToDo; i++;
	for j = 0; j < reviews.length; j++;
		reviews[j].push(submissions[offset])
		offset++;
		if offset > maxClockOffset
			offset = 0;
			
for i = 0; i < users.length; i++;
	users[i].reviewsToDo = reviews[i];
	
	